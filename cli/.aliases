#!/bin/sh

# Use neovim for vim when possible.
command -v nvim >/dev/null && alias vim='nvim' vimdiff='nvim -d'

# Easier navigation:
alias cd..='cd ..'
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."
alias u='cd ..'
alias uu='cd ../..'
alias uuu='cd ../../..'

# Shortcuts
alias r="fc -s" # Fixes your last command with a substitution e.g r fle=file
alias bat="bat --theme TwoDark"
alias sdn="sudo shutdown now"
alias p="sudo pacman"
alias ka="killall"
alias SS="sudo systemctl"
alias mkd='mkdir -pv' # Create parent dirs on demand
alias e='$EDITOR' # Alias e to the editor
alias cls='clear && ls' # Clear and list files
alias diff='icdiff'
alias mnt="mount | awk -F' ' '{ printf \"%s\t%s\n\",\$1,\$3; }' | column -t | egrep ^/dev/ | sort" # View mounted devices
alias gh='history | grep'
alias c='clear'
alias sha1='openssl sha1'
alias h='history'
alias j='jobs -l'
alias sxiv='sxiv -a'
alias sf='tree -f -i | grep' # search file
alias sfa='tree -f -i -a | grep' # search file al all
alias countdown='time=5; while (( $time > 0 )); do printf "$time\r"; time="$(expr "$time" - 1)"; sleep 1; done'
function drb( )
{
  docker_img="$1"
  shift
  docker run --rm -it $docker_img ${@:-/bin/bash}
}
function drbe( )
{
  docker_img="$1"
  shift
  docker run --rm -it $docker_img --entrypoint ${@:-/bin/bash}
}

# Navigation
alias choose='find | fzf'
alias chooseMultiple='find | fzf -m'
alias chooseDir='find -type d | fzf'
alias chooseDirs='find -type d | fzf -m'
alias chooseFile='find -type f | fzf'
alias chooseFiles='find -type f | fzf -m'
alias rmc='rm -rf "$(choose)"'
alias fcd='cd "$(chooseDir)"'
command -v xdg-open &> /dev/null && alias oc='xdg-open "$(choose)"'
alias ocm='chooseMultiple | xargs -0 xdg-open'
command -v xdg-open &> /dev/null && alias ocd='xdg-open "$(chooseDir)"'
alias ocdm='chooseDirs | xargs -0 xdg-open'
command -v xdg-open &> /dev/null && alias ocf='xdg-open "$(chooseFile)"'
alias ocfm='chooseFiles | xargs -0 xdg-open'

command -v rsync &> /dev/null && alias pmove='rsync --progress -auv'

# Consoom
command -v youtube-viewer &> /dev/null && alias ytv='youtube-viewer'
command -v youtube-dl &> /dev/null && alias yt='youtube-dl --add-metadata -ic'
command -v youtube-dl &> /dev/null && alias yta='youtube-dl --add-metadata -xic'

# Confirmation
alias cp='cp -i' # Add confirmation
alias mv='mv -i' # Add confirmation
alias rm='rm -i' # Add confirmation
alias ln='ln -i' # Add confirmation

# Verbose output
alias cp='cp -v' # Add verbose output
alias mv='mv -v' # Add verbose output
alias rm='rm -v' # Add verbose output
alias ln='ln -v' # Add verbose output

# Preserve root
alias chown='chown --preserve-root'
alias chmod='chmod --preserve-root'
alias chgrp='chgrp --preserve-root'
alias rm='rm --preserve-root'

# Pacman
alias paci='sudo pacman -S' # Pac-install
alias pacr='sudo pacman -R' # Pac-remove
alias pacu='sudo pacman -Syu' # Pac-update
#alias autoremove='sudo pacman -Qtdq | sudo pacman -Rns -'
alias autoremove='yay -Yc'

# Networking
alias fastping='ping -c 20 -i 0.2'
alias header='curl -I'
alias ports='netstat -tulanp'

# Color stuffs
alias grep='grep --color=auto'
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'
alias ccat='highlight --out-format=ansi -n'

# Get week number
alias week='date +%V'

# Print each PATH entry on a separate line
alias path='echo -e ${PATH//:/\\n}'

# LS stuff
if command -v exa &> /dev/null
then
    alias ls='exa -hF --group-directories-first --color=auto'
else
    alias ls='ls -hF --group-directories-first --color=auto'
fi
alias l='ls'
alias la='ls -a'
alias lal='ls -al'
alias ll='ls -l'
alias left='ls -t -1' # Where you left off
alias lsless='ls -al --color=always | less -r'
alias du='du -h'
alias t='tree'
alias getsizes='sudo du -shc .[!.]* * | sort -rh'

# Python shortcuts
alias ve='virtualenv venv'
alias va='source ./venv/bin/activate'

# BeautifulDiscord
if [[ -f ~/dev/BeautifulDiscord/run.sh ]] ; then
    alias beautifuldiscord="$HOME/dev/BeautifulDiscord/run.sh"
    alias bdinject="beautifuldiscord --css $HOME/.config/beautifuldiscord.css"
    alias bduninject="beautifuldiscord --revert"
fi

# Configuration
confdir="$HOME/dev/rice/dotfiles"
function confls( )
{
    #echo "csy  - sync config"
    #echo "csyf - force sync config"
    #echo "cnv  - neovim config"
    #echo "car  - edit aliasrc"
    #echo "cbr  - edit bashrc"
    #echo "cbp  - edit bash_profile"
    #echo "cst  - edit dwm status thing"
    #echo "cxr  - edit xresources"
    #echo "cxi  - edit .xinitrc"
    echo "cfo  - edit global fonts and then fc-cache"
    echo "cgc  - edit grub config"
    #echo "cbd  - edit BeautifulDiscord css"
    #echo "cpc  - edit picom.conf"
    echo "applygrub - grub-mkconfig"
}
#alias csy="$confdir/bootstrap.sh ; source $HOME/.bash_profile"
#alias csyf="$confdir/bootstrap.sh --force ; source $HOME/.bash_profile"
#alias cnv="$EDITOR $confdir/.config/nvim/init.vim ; csyf"
#alias car="$EDITOR $confdir/aliasrc.sh ; csyf"
#alias cbr="$EDITOR $confdir/.bashrc ; csyf"
#alias cbp="$EDITOR $confdir/bash_profile ; csyf"
#alias cst="$EDITOR $confdir/.dwm/status.sh ; csyf"
#alias cxr="$EDITOR $confdir/.Xresources ; csyf ; xrdb -merge $HOME/.Xresources"
#alias cxi="$EDITOR $confdir/.xinitrc ; csyf"
alias cfo="sudo $EDITOR /etc/fonts/local.conf ; fc-cache"
alias cgc="sudo printf '' && sudo $EDITOR /etc/default/grub"
#alias cbd="$EDITOR $confdir/.config/beautifuldiscord.css ; csyf"
#alias cpc="$EDITOR $confdir/.config/picom.conf ; csyf"
alias applygrub="sudo printf '' && sudo grub-mkconfig -o /boot/grub/grub.cfg"

# Git shortcuts
if command -v git &> /dev/null ; then
    alias g="git"
    alias ginit='git init'
    alias gadd='git add'
    alias gco='git commit'
    alias gcom='git commit -m'
    alias gpush='git push'
    alias gpul='git pull'
    alias gbranch='git branch'
    alias gradd='git remote add'
    alias gs='git status'
    function gsd( )
    {
         git --git-dir=$1/.git --work-tree=$1 status
    }

    function stringContain( )
    {
        [ -z "${2##*$1*}" ];
    }

    function gsda( )
    {
        for file in ./* ; do
            if [[ -d "$file" && ! -L "$file" && -d "$file/.git" && ! -L "$file/.git" ]]; then

                git_status=`gsd $file`
                substr1="working tree clean"
                substr2="not a git repository"

                if stringContain "$substr1" "$git_status"; then
                    echo "$file skipped (working tree clean)"
                    continue
                fi

                if stringContain "$substr2" "$git_status"; then
                    echo "$file skipped (not a git repo)"
                    continue
                fi


                echo "### $file GIT STATUS:"
                gsd $file
                echo
            else
                echo "$file skipped (not a dir or does not have .git subdirectory)"
            fi;
        done
    }
fi

# Scrap Mechanic stuff
# Requires
# "~/games/sm/app" to be symlinked to "~/.steam/steam/steamapps/common/Scrap Mechanic/"
# and
# "~/games/sm/appdata" to be symlinked to "~/.steam/steam/steamapps/compatdata/387990/pfx/drive_c/users/steamuser/Application Data/Axolot Games/Scrap Mechanic/User/User_*your steamid here*"
function sm_devmode_on( )
{
    SurvivalGame_file_path="$HOME/games/sm/app/Survival/Scripts/game/SurvivalGame.lua"
    sed 's/if self.sv.saved.data and self.sv.saved.data.dev then/if true or self.sv.saved.data and self.sv.saved.data.dev then/' $SurvivalGame_file_path -i
}
function sm_devmode_off( )
{
    SurvivalGame_file_path="$HOME/games/sm/app/Survival/Scripts/game/SurvivalGame.lua"
    sed 's/if true or self.sv.saved.data and self.sv.saved.data.dev then/if self.sv.saved.data and self.sv.saved.data.dev then/' $SurvivalGame_file_path -i
}

function rec_screen( )
{
    screen_grep_name=$(xrandr --listactivemonitors | awk '(NR>1)' | awk '{ print $4 }' | dmenu)
    screen_combo=$(xrandr --listactivemonitors | awk '(NR>1)' | grep "$screen_grep_name" | awk '{print $3 }')

    screen_resolution_x=$(echo $screen_combo | cut -d'+' -f1 | cut -d'x' -f1 | cut -d'/' -f1)
    screen_resolution_y=$(echo $screen_combo | cut -d'+' -f1 | cut -d'x' -f2 | cut -d'/' -f1)
    screen_resolution=$(echo "${screen_resolution_x}x${screen_resolution_y}")

    screen_offset_x=$(echo $screen_combo | cut -d'+' -f2)
    screen_offset_y=$(echo $screen_combo | cut -d'+' -f3)
    screen_offset=$(echo "${screen_offset_x},${screen_offset_y}")
    
    ffmpeg -f x11grab -s $screen_resolution -i ":0.0+${screen_offset}" /tmp/out.mkv
}

function colorgrid( )
{
    iter=16
    while [ $iter -lt 52 ]
    do
        second=$[$iter+36]
        third=$[$second+36]
        four=$[$third+36]
        five=$[$four+36]
        six=$[$five+36]
        seven=$[$six+36]
        if [ $seven -gt 250 ];then seven=$[$seven-251]; fi

        echo -en "\033[38;5;$(echo $iter)m█ "
        printf "%03d" $iter
        echo -en "   \033[38;5;$(echo $second)m█ "
        printf "%03d" $second
        echo -en "   \033[38;5;$(echo $third)m█ "
        printf "%03d" $third
        echo -en "   \033[38;5;$(echo $four)m█ "
        printf "%03d" $four
        echo -en "   \033[38;5;$(echo $five)m█ "
        printf "%03d" $five
        echo -en "   \033[38;5;$(echo $six)m█ "
        printf "%03d" $six
        echo -en "   \033[38;5;$(echo $seven)m█ "
        printf "%03d" $seven

        iter=$[$iter+1]
        printf '\r\n'
    done
}


# PulseAudio Loopback
function paloop( )
{
    pactl load-module module-null-sink sink_name=PALoop
    pactl load-module module-loopback sink=PALoop
}

function pathsame( )
{
    path1="$1"
    path2="$2"

    cd "$path1"
    output1=$(tree -f -i)
    cd -

    cd "$path2"
    output2=$(tree -f -i)
    cd -

    #comm -12 <(sort <(echo $output1)) <(sort <(echo $output2))
    grep -f <(echo $output1) <(echo $output2)
    #printf "$output1\n\n"
    #printf "$output2\n\n"
}

function pathsame2( )
{
    find -type f -print0 |
        awk -F/ 'BEGIN { RS="\0" } { n=$NF } k[n]==1 { print p[n]; } k[n] { print $0 } { p[n]=$0; k[n]++ }'
}

function pathsame3( )
{
    prefix="pathsame"

    # Create a temporary directory. For accurate results we need
    # to be sure it is empty. This is one way to do this: create
    # an temp dir that is garanteed to not exist yet.
    #
    # If you want to keep the "outputdir" with the results, make sure
    # output dir you use does not contain files you want to keep, because
    # files will be removed from it by this script! Better yet, make
    # sure it is empty before starting this script.
    #
    outputdir=$(mktemp --tmpdir -d "${prefix}.XXXXXXXXXX")   # ensures new unique directory
    trap "rm -r $outputdir" INT HUP QUIT ABRT ALRM TERM EXIT # ensures it is deleted when script ends

    # Search the directories given as arguments, and process
    # the paths of alle files one by one in a loop.
    #
    find "$@" -type f | while read path ; do
        filename="${path##*/}"
        echo "$path" >>"${outputdir}/${filename}.txt"
    done

    # Finally, if you want to end up with only file names that
    # occur more than once, delete all output files that contain
    # only one line.
    #
    for outputfile in $outputdir/*.txt ; do
        linecount=$(wc -l "$outputfile" | sed 's/ .*//')  # count lines in it
        if  [ "$linecount" = "1" ] ; then                 # if only one line
          rm "$outputfile"                              # remove the file
        fi
    done

    # Print the final result
    #
    for outputfile in $outputdir/*.txt ; do
        cat "$outputfile"
        echo               # empty line to separate groups of same file names
    done
}
